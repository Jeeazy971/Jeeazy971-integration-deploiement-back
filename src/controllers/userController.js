const User = require('../models/User');
const bcrypt = require('bcryptjs');

// üìå Inscription d'un utilisateur
exports.registerUser = async (req, res) => {
    const { firstName, lastName, email, password, birthDate, city, postalCode } = req.body;

    // V√©rification de l'√¢ge
    const age = new Date().getFullYear() - new Date(birthDate).getFullYear();
    if (age < 18) {
        return res.status(400).json({ msg: 'Vous devez avoir plus de 18 ans' });
    }

    try {
        let user = await User.findOne({ email });
        if (user) return res.status(400).json({ msg: 'Utilisateur d√©j√† existant' });

        const hashedPassword = await bcrypt.hash(password, 10);

        user = new User({ firstName, lastName, email, password: hashedPassword, birthDate, city, postalCode, role: "user" });
        await user.save();

        res.status(201).json({ msg: 'Utilisateur enregistr√© avec succ√®s' });
    } catch (error) {
        res.status(500).json({ msg: 'Erreur serveur' });
    }
};

/**
 * @swagger
 * /api/users:
 *   get:
 *     summary: R√©cup√©rer la liste des utilisateurs (sans les admins, email et date de naissance cach√©s)
 *     tags: [Utilisateurs]
 *     responses:
 *       200:
 *         description: Succ√®s - Liste des utilisateurs
 */
exports.getUsers = async (req, res) => {
    try {
        const users = await User.find({ role: "user" }, '-email -birthDate');
        res.json(users);
    } catch (error) {
        res.status(500).json({ msg: 'Erreur serveur' });
    }
};

/**
 * @swagger
 * /api/users/admins:
 *   get:
 *     summary: R√©cup√©rer la liste des administrateurs (r√©serv√© aux admins)
 *     tags: [Utilisateurs]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Succ√®s - Liste des administrateurs
 *       403:
 *         description: Acc√®s interdit - Authentification requise
 */
exports.getAdmins = async (req, res) => {
    if (req.user.role !== "admin") {
        return res.status(403).json({ msg: 'Acc√®s interdit. Seuls les administrateurs peuvent voir cette liste.' });
    }

    try {
        const admins = await User.find({ role: "admin" }, '-password');
        res.json(admins);
    } catch (error) {
        res.status(500).json({ msg: 'Erreur serveur' });
    }
};

// üìå Suppression d'un utilisateur (admin uniquement)
exports.deleteUser = async (req, res) => {
    if (req.user.role !== "admin") {
        return res.status(403).json({ msg: "Acc√®s interdit" });
    }

    try {
        await User.findByIdAndDelete(req.params.id);
        res.json({ msg: 'Utilisateur supprim√©' });
    } catch (error) {
        res.status(500).json({ msg: 'Erreur serveur' });
    }
};

/**
 * @swagger
 * /api/users/create:
 *   post:
 *     summary: Cr√©er un utilisateur ou un administrateur (r√©serv√© aux admins)
 *     tags: [Utilisateurs]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/CreateUserRequest'
 *     responses:
 *       201:
 *         description: Succ√®s - Utilisateur cr√©√©
 *       400:
 *         description: Erreur - Donn√©es invalides
 *       403:
 *         description: Acc√®s interdit
 *       500:
 *         description: Erreur serveur
 */
exports.createUser = async (req, res) => {
    if (req.user.role !== "admin") {
        return res.status(403).json({ msg: 'Acc√®s interdit. Seuls les administrateurs peuvent cr√©er des utilisateurs.' });
    }

    const { firstName, lastName, email, password, birthDate, city, postalCode, role } = req.body;

    try {
        let user = await User.findOne({ email });
        if (user) return res.status(400).json({ msg: 'Cet utilisateur existe d√©j√†.' });

        const hashedPassword = await bcrypt.hash(password, 10);
        const userRole = role === "admin" && req.user.role === "admin" ? "admin" : "user";

        user = new User({ firstName, lastName, email, password: hashedPassword, birthDate, city, postalCode, role: userRole });

        await user.save();
        res.status(201).json({ msg: `Utilisateur ${userRole} cr√©√© avec succ√®s.` });
    } catch (error) {
        res.status(500).json({ msg: 'Erreur serveur' });
    }
};
